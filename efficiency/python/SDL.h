// -*- C++ -*-
#ifndef SDL_H
#define SDL_H
#define OUTPUT_LS_CUTS
#define OUTPUT_MD_CUTS
#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector>
#include <unistd.h>
typedef ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > LorentzVector;

// Generated with file: ../../LSTNtuple.root

using namespace std;
class SDL {
private:
protected:
  unsigned int index;
  vector<float> *sim_pt_;
  TBranch *sim_pt_branch;
  bool sim_pt_isLoaded;
  vector<float> *sim_eta_;
  TBranch *sim_eta_branch;
  bool sim_eta_isLoaded;
  vector<float> *sim_phi_;
  TBranch *sim_phi_branch;
  bool sim_phi_isLoaded;
  vector<float> *sim_pca_dxy_;
  TBranch *sim_pca_dxy_branch;
  bool sim_pca_dxy_isLoaded;
  vector<float> *sim_pca_dz_;
  TBranch *sim_pca_dz_branch;
  bool sim_pca_dz_isLoaded;
  vector<int> *sim_q_;
  TBranch *sim_q_branch;
  bool sim_q_isLoaded;
  vector<int> *sim_pdgId_;
  TBranch *sim_pdgId_branch;
  bool sim_pdgId_isLoaded;
  vector<float> *sim_vx_;
  TBranch *sim_vx_branch;
  bool sim_vx_isLoaded;
  vector<float> *sim_vy_;
  TBranch *sim_vy_branch;
  bool sim_vy_isLoaded;
  vector<float> *sim_vz_;
  TBranch *sim_vz_branch;
  bool sim_vz_isLoaded;
  vector<float> *sim_vtxperp_;
  TBranch *sim_vtxperp_branch;
  bool sim_vtxperp_isLoaded;
  vector<float> *sim_trkNtupIdx_;
  TBranch *sim_trkNtupIdx_branch;
  bool sim_trkNtupIdx_isLoaded;
  vector<int> *sim_tcIdx_;
  TBranch *sim_tcIdx_branch;
  bool sim_tcIdx_isLoaded;
  vector<vector<int> > *sim_tcIdxAll_;
  TBranch *sim_tcIdxAll_branch;
  bool sim_tcIdxAll_isLoaded;
  vector<vector<float> > *sim_tcIdxAllFrac_;
  TBranch *sim_tcIdxAllFrac_branch;
  bool sim_tcIdxAllFrac_isLoaded;
  vector<vector<int> > *sim_mdIdxAll_;
  TBranch *sim_mdIdxAll_branch;
  bool sim_mdIdxAll_isLoaded;
  vector<vector<float> > *sim_mdIdxAllFrac_;
  TBranch *sim_mdIdxAllFrac_branch;
  bool sim_mdIdxAllFrac_isLoaded;
  vector<vector<int> > *sim_lsIdxAll_;
  TBranch *sim_lsIdxAll_branch;
  bool sim_lsIdxAll_isLoaded;
  vector<vector<float> > *sim_lsIdxAllFrac_;
  TBranch *sim_lsIdxAllFrac_branch;
  bool sim_lsIdxAllFrac_isLoaded;
  vector<vector<int> > *sim_t3IdxAll_;
  TBranch *sim_t3IdxAll_branch;
  bool sim_t3IdxAll_isLoaded;
  vector<vector<float> > *sim_t3IdxAllFrac_;
  TBranch *sim_t3IdxAllFrac_branch;
  bool sim_t3IdxAllFrac_isLoaded;
  vector<vector<int> > *sim_t5IdxAll_;
  TBranch *sim_t5IdxAll_branch;
  bool sim_t5IdxAll_isLoaded;
  vector<vector<float> > *sim_t5IdxAllFrac_;
  TBranch *sim_t5IdxAllFrac_branch;
  bool sim_t5IdxAllFrac_isLoaded;
  vector<vector<int> > *sim_plsIdxAll_;
  TBranch *sim_plsIdxAll_branch;
  bool sim_plsIdxAll_isLoaded;
  vector<vector<float> > *sim_plsIdxAllFrac_;
  TBranch *sim_plsIdxAllFrac_branch;
  bool sim_plsIdxAllFrac_isLoaded;
  vector<vector<int> > *sim_pt3IdxAll_;
  TBranch *sim_pt3IdxAll_branch;
  bool sim_pt3IdxAll_isLoaded;
  vector<vector<float> > *sim_pt3IdxAllFrac_;
  TBranch *sim_pt3IdxAllFrac_branch;
  bool sim_pt3IdxAllFrac_isLoaded;
  vector<vector<int> > *sim_pt5IdxAll_;
  TBranch *sim_pt5IdxAll_branch;
  bool sim_pt5IdxAll_isLoaded;
  vector<vector<float> > *sim_pt5IdxAllFrac_;
  TBranch *sim_pt5IdxAllFrac_branch;
  bool sim_pt5IdxAllFrac_isLoaded;
  vector<vector<float> > *sim_simHitX_;
  TBranch *sim_simHitX_branch;
  bool sim_simHitX_isLoaded;
  vector<vector<float> > *sim_simHitY_;
  TBranch *sim_simHitY_branch;
  bool sim_simHitY_isLoaded;
  vector<vector<float> > *sim_simHitZ_;
  TBranch *sim_simHitZ_branch;
  bool sim_simHitZ_isLoaded;
  vector<vector<int> > *sim_simHitDetId_;
  TBranch *sim_simHitDetId_branch;
  bool sim_simHitDetId_isLoaded;
  vector<vector<int> > *sim_simHitLayer_;
  TBranch *sim_simHitLayer_branch;
  bool sim_simHitLayer_isLoaded;
  vector<vector<float> > *sim_simHitDistxyHelix_;
  TBranch *sim_simHitDistxyHelix_branch;
  bool sim_simHitDistxyHelix_isLoaded;
  vector<vector<float> > *sim_simHitLayerMinDistxyHelix_;
  TBranch *sim_simHitLayerMinDistxyHelix_branch;
  bool sim_simHitLayerMinDistxyHelix_isLoaded;
  vector<vector<float> > *sim_recoHitX_;
  TBranch *sim_recoHitX_branch;
  bool sim_recoHitX_isLoaded;
  vector<vector<float> > *sim_recoHitY_;
  TBranch *sim_recoHitY_branch;
  bool sim_recoHitY_isLoaded;
  vector<vector<float> > *sim_recoHitZ_;
  TBranch *sim_recoHitZ_branch;
  bool sim_recoHitZ_isLoaded;
  vector<vector<int> > *sim_recoHitDetId_;
  TBranch *sim_recoHitDetId_branch;
  bool sim_recoHitDetId_isLoaded;
  vector<float> *tc_pt_;
  TBranch *tc_pt_branch;
  bool tc_pt_isLoaded;
  vector<float> *tc_eta_;
  TBranch *tc_eta_branch;
  bool tc_eta_isLoaded;
  vector<float> *tc_phi_;
  TBranch *tc_phi_branch;
  bool tc_phi_isLoaded;
  vector<int> *tc_type_;
  TBranch *tc_type_branch;
  bool tc_type_isLoaded;
  vector<int> *tc_pt5Idx_;
  TBranch *tc_pt5Idx_branch;
  bool tc_pt5Idx_isLoaded;
  vector<int> *tc_pt3Idx_;
  TBranch *tc_pt3Idx_branch;
  bool tc_pt3Idx_isLoaded;
  vector<int> *tc_t5Idx_;
  TBranch *tc_t5Idx_branch;
  bool tc_t5Idx_isLoaded;
  vector<int> *tc_plsIdx_;
  TBranch *tc_plsIdx_branch;
  bool tc_plsIdx_isLoaded;
  vector<int> *tc_isFake_;
  TBranch *tc_isFake_branch;
  bool tc_isFake_isLoaded;
  vector<int> *tc_isDuplicate_;
  TBranch *tc_isDuplicate_branch;
  bool tc_isDuplicate_isLoaded;
  vector<int> *tc_simIdx_;
  TBranch *tc_simIdx_branch;
  bool tc_simIdx_isLoaded;
  vector<vector<int> > *tc_simIdxAll_;
  TBranch *tc_simIdxAll_branch;
  bool tc_simIdxAll_isLoaded;
  vector<vector<float> > *tc_simIdxAllFrac_;
  TBranch *tc_simIdxAllFrac_branch;
  bool tc_simIdxAllFrac_isLoaded;
  vector<float> *md_pt_;
  TBranch *md_pt_branch;
  bool md_pt_isLoaded;
  vector<float> *md_eta_;
  TBranch *md_eta_branch;
  bool md_eta_isLoaded;
  vector<float> *md_phi_;
  TBranch *md_phi_branch;
  bool md_phi_isLoaded;
  vector<float> *md_anchor_x_;
  TBranch *md_anchor_x_branch;
  bool md_anchor_x_isLoaded;
  vector<float> *md_anchor_y_;
  TBranch *md_anchor_y_branch;
  bool md_anchor_y_isLoaded;
  vector<float> *md_anchor_z_;
  TBranch *md_anchor_z_branch;
  bool md_anchor_z_isLoaded;
  vector<float> *md_other_x_;
  TBranch *md_other_x_branch;
  bool md_other_x_isLoaded;
  vector<float> *md_other_y_;
  TBranch *md_other_y_branch;
  bool md_other_y_isLoaded;
  vector<float> *md_other_z_;
  TBranch *md_other_z_branch;
  bool md_other_z_isLoaded;
  vector<int> *md_type_;
  TBranch *md_type_branch;
  bool md_type_isLoaded;
  vector<int> *md_layer_;
  TBranch *md_layer_branch;
  bool md_layer_isLoaded;
  vector<int> *md_detId_;
  TBranch *md_detId_branch;
  bool md_detId_isLoaded;
  vector<int> *md_isFake_;
  TBranch *md_isFake_branch;
  bool md_isFake_isLoaded;
  vector<int> *md_simIdx_;
  TBranch *md_simIdx_branch;
  bool md_simIdx_isLoaded;
  vector<vector<int> > *md_simIdxAll_;
  TBranch *md_simIdxAll_branch;
  bool md_simIdxAll_isLoaded;
  vector<vector<float> > *md_simIdxAllFrac_;
  TBranch *md_simIdxAllFrac_branch;
  bool md_simIdxAllFrac_isLoaded;
  vector<float> *ls_pt_;
  TBranch *ls_pt_branch;
  bool ls_pt_isLoaded;
  vector<float> *ls_eta_;
  TBranch *ls_eta_branch;
  bool ls_eta_isLoaded;
  vector<float> *ls_phi_;
  TBranch *ls_phi_branch;
  bool ls_phi_isLoaded;
  vector<int> *ls_mdIdx0_;
  TBranch *ls_mdIdx0_branch;
  bool ls_mdIdx0_isLoaded;
  vector<int> *ls_mdIdx1_;
  TBranch *ls_mdIdx1_branch;
  bool ls_mdIdx1_isLoaded;
  vector<int> *ls_isFake_;
  TBranch *ls_isFake_branch;
  bool ls_isFake_isLoaded;
  vector<int> *ls_simIdx_;
  TBranch *ls_simIdx_branch;
  bool ls_simIdx_isLoaded;
  vector<vector<int> > *ls_simIdxAll_;
  TBranch *ls_simIdxAll_branch;
  bool ls_simIdxAll_isLoaded;
  vector<vector<float> > *ls_simIdxAllFrac_;
  TBranch *ls_simIdxAllFrac_branch;
  bool ls_simIdxAllFrac_isLoaded;
  vector<float> *t3_pt_;
  TBranch *t3_pt_branch;
  bool t3_pt_isLoaded;
  vector<float> *t3_eta_;
  TBranch *t3_eta_branch;
  bool t3_eta_isLoaded;
  vector<float> *t3_phi_;
  TBranch *t3_phi_branch;
  bool t3_phi_isLoaded;
  vector<int> *t3_lsIdx0_;
  TBranch *t3_lsIdx0_branch;
  bool t3_lsIdx0_isLoaded;
  vector<int> *t3_lsIdx1_;
  TBranch *t3_lsIdx1_branch;
  bool t3_lsIdx1_isLoaded;
  vector<int> *t3_isFake_;
  TBranch *t3_isFake_branch;
  bool t3_isFake_isLoaded;
  vector<int> *t3_isDuplicate_;
  TBranch *t3_isDuplicate_branch;
  bool t3_isDuplicate_isLoaded;
  vector<int> *t3_simIdx_;
  TBranch *t3_simIdx_branch;
  bool t3_simIdx_isLoaded;
  vector<vector<int> > *t3_simIdxAll_;
  TBranch *t3_simIdxAll_branch;
  bool t3_simIdxAll_isLoaded;
  vector<vector<float> > *t3_simIdxAllFrac_;
  TBranch *t3_simIdxAllFrac_branch;
  bool t3_simIdxAllFrac_isLoaded;
  vector<float> *t5_pt_;
  TBranch *t5_pt_branch;
  bool t5_pt_isLoaded;
  vector<float> *t5_eta_;
  TBranch *t5_eta_branch;
  bool t5_eta_isLoaded;
  vector<float> *t5_phi_;
  TBranch *t5_phi_branch;
  bool t5_phi_isLoaded;
  vector<int> *t5_t3Idx0_;
  TBranch *t5_t3Idx0_branch;
  bool t5_t3Idx0_isLoaded;
  vector<int> *t5_t3Idx1_;
  TBranch *t5_t3Idx1_branch;
  bool t5_t3Idx1_isLoaded;
  vector<int> *t5_isFake_;
  TBranch *t5_isFake_branch;
  bool t5_isFake_isLoaded;
  vector<int> *t5_isDuplicate_;
  TBranch *t5_isDuplicate_branch;
  bool t5_isDuplicate_isLoaded;
  vector<int> *t5_simIdx_;
  TBranch *t5_simIdx_branch;
  bool t5_simIdx_isLoaded;
  vector<vector<int> > *t5_simIdxAll_;
  TBranch *t5_simIdxAll_branch;
  bool t5_simIdxAll_isLoaded;
  vector<vector<float> > *t5_simIdxAllFrac_;
  TBranch *t5_simIdxAllFrac_branch;
  bool t5_simIdxAllFrac_isLoaded;
  vector<float> *pls_pt_;
  TBranch *pls_pt_branch;
  bool pls_pt_isLoaded;
  vector<float> *pls_eta_;
  TBranch *pls_eta_branch;
  bool pls_eta_isLoaded;
  vector<float> *pls_phi_;
  TBranch *pls_phi_branch;
  bool pls_phi_isLoaded;
  vector<int> *pls_nhit_;
  TBranch *pls_nhit_branch;
  bool pls_nhit_isLoaded;
  vector<float> *pls_hit0_x_;
  TBranch *pls_hit0_x_branch;
  bool pls_hit0_x_isLoaded;
  vector<float> *pls_hit0_y_;
  TBranch *pls_hit0_y_branch;
  bool pls_hit0_y_isLoaded;
  vector<float> *pls_hit0_z_;
  TBranch *pls_hit0_z_branch;
  bool pls_hit0_z_isLoaded;
  vector<float> *pls_hit1_x_;
  TBranch *pls_hit1_x_branch;
  bool pls_hit1_x_isLoaded;
  vector<float> *pls_hit1_y_;
  TBranch *pls_hit1_y_branch;
  bool pls_hit1_y_isLoaded;
  vector<float> *pls_hit1_z_;
  TBranch *pls_hit1_z_branch;
  bool pls_hit1_z_isLoaded;
  vector<float> *pls_hit2_x_;
  TBranch *pls_hit2_x_branch;
  bool pls_hit2_x_isLoaded;
  vector<float> *pls_hit2_y_;
  TBranch *pls_hit2_y_branch;
  bool pls_hit2_y_isLoaded;
  vector<float> *pls_hit2_z_;
  TBranch *pls_hit2_z_branch;
  bool pls_hit2_z_isLoaded;
  vector<float> *pls_hit3_x_;
  TBranch *pls_hit3_x_branch;
  bool pls_hit3_x_isLoaded;
  vector<float> *pls_hit3_y_;
  TBranch *pls_hit3_y_branch;
  bool pls_hit3_y_isLoaded;
  vector<float> *pls_hit3_z_;
  TBranch *pls_hit3_z_branch;
  bool pls_hit3_z_isLoaded;
  vector<int> *pls_isFake_;
  TBranch *pls_isFake_branch;
  bool pls_isFake_isLoaded;
  vector<int> *pls_isDuplicate_;
  TBranch *pls_isDuplicate_branch;
  bool pls_isDuplicate_isLoaded;
  vector<int> *pls_simIdx_;
  TBranch *pls_simIdx_branch;
  bool pls_simIdx_isLoaded;
  vector<vector<int> > *pls_simIdxAll_;
  TBranch *pls_simIdxAll_branch;
  bool pls_simIdxAll_isLoaded;
  vector<vector<float> > *pls_simIdxAllFrac_;
  TBranch *pls_simIdxAllFrac_branch;
  bool pls_simIdxAllFrac_isLoaded;
  vector<float> *pt3_pt_;
  TBranch *pt3_pt_branch;
  bool pt3_pt_isLoaded;
  vector<float> *pt3_eta_;
  TBranch *pt3_eta_branch;
  bool pt3_eta_isLoaded;
  vector<float> *pt3_phi_;
  TBranch *pt3_phi_branch;
  bool pt3_phi_isLoaded;
  vector<int> *pt3_plsIdx_;
  TBranch *pt3_plsIdx_branch;
  bool pt3_plsIdx_isLoaded;
  vector<int> *pt3_t3Idx_;
  TBranch *pt3_t3Idx_branch;
  bool pt3_t3Idx_isLoaded;
  vector<int> *pt3_isFake_;
  TBranch *pt3_isFake_branch;
  bool pt3_isFake_isLoaded;
  vector<int> *pt3_isDuplicate_;
  TBranch *pt3_isDuplicate_branch;
  bool pt3_isDuplicate_isLoaded;
  vector<int> *pt3_simIdx_;
  TBranch *pt3_simIdx_branch;
  bool pt3_simIdx_isLoaded;
  vector<vector<int> > *pt3_simIdxAll_;
  TBranch *pt3_simIdxAll_branch;
  bool pt3_simIdxAll_isLoaded;
  vector<vector<float> > *pt3_simIdxAllFrac_;
  TBranch *pt3_simIdxAllFrac_branch;
  bool pt3_simIdxAllFrac_isLoaded;
  vector<float> *pt5_pt_;
  TBranch *pt5_pt_branch;
  bool pt5_pt_isLoaded;
  vector<float> *pt5_eta_;
  TBranch *pt5_eta_branch;
  bool pt5_eta_isLoaded;
  vector<float> *pt5_phi_;
  TBranch *pt5_phi_branch;
  bool pt5_phi_isLoaded;
  vector<int> *pt5_plsIdx_;
  TBranch *pt5_plsIdx_branch;
  bool pt5_plsIdx_isLoaded;
  vector<int> *pt5_t5Idx_;
  TBranch *pt5_t5Idx_branch;
  bool pt5_t5Idx_isLoaded;
  vector<int> *pt5_isFake_;
  TBranch *pt5_isFake_branch;
  bool pt5_isFake_isLoaded;
  vector<int> *pt5_isDuplicate_;
  TBranch *pt5_isDuplicate_branch;
  bool pt5_isDuplicate_isLoaded;
  vector<int> *pt5_simIdx_;
  TBranch *pt5_simIdx_branch;
  bool pt5_simIdx_isLoaded;
  vector<vector<int> > *pt5_simIdxAll_;
  TBranch *pt5_simIdxAll_branch;
  bool pt5_simIdxAll_isLoaded;
  vector<vector<float> > *pt5_simIdxAllFrac_;
  TBranch *pt5_simIdxAllFrac_branch;
  bool pt5_simIdxAllFrac_isLoaded;
public:
  void Init(TTree *tree);
  void GetEntry(unsigned int idx);
  void LoadAllBranches();
  const vector<float> &sim_pt();
  const vector<float> &sim_eta();
  const vector<float> &sim_phi();
  const vector<float> &sim_pca_dxy();
  const vector<float> &sim_pca_dz();
  const vector<int> &sim_q();
  const vector<int> &sim_pdgId();
  const vector<float> &sim_vx();
  const vector<float> &sim_vy();
  const vector<float> &sim_vz();
  const vector<float> &sim_vtxperp();
  const vector<float> &sim_trkNtupIdx();
  const vector<int> &sim_tcIdx();
  const vector<vector<int> > &sim_tcIdxAll();
  const vector<vector<float> > &sim_tcIdxAllFrac();
  const vector<vector<int> > &sim_mdIdxAll();
  const vector<vector<float> > &sim_mdIdxAllFrac();
  const vector<vector<int> > &sim_lsIdxAll();
  const vector<vector<float> > &sim_lsIdxAllFrac();
  const vector<vector<int> > &sim_t3IdxAll();
  const vector<vector<float> > &sim_t3IdxAllFrac();
  const vector<vector<int> > &sim_t5IdxAll();
  const vector<vector<float> > &sim_t5IdxAllFrac();
  const vector<vector<int> > &sim_plsIdxAll();
  const vector<vector<float> > &sim_plsIdxAllFrac();
  const vector<vector<int> > &sim_pt3IdxAll();
  const vector<vector<float> > &sim_pt3IdxAllFrac();
  const vector<vector<int> > &sim_pt5IdxAll();
  const vector<vector<float> > &sim_pt5IdxAllFrac();
  const vector<vector<float> > &sim_simHitX();
  const vector<vector<float> > &sim_simHitY();
  const vector<vector<float> > &sim_simHitZ();
  const vector<vector<int> > &sim_simHitDetId();
  const vector<vector<int> > &sim_simHitLayer();
  const vector<vector<float> > &sim_simHitDistxyHelix();
  const vector<vector<float> > &sim_simHitLayerMinDistxyHelix();
  const vector<vector<float> > &sim_recoHitX();
  const vector<vector<float> > &sim_recoHitY();
  const vector<vector<float> > &sim_recoHitZ();
  const vector<vector<int> > &sim_recoHitDetId();
  const vector<float> &tc_pt();
  const vector<float> &tc_eta();
  const vector<float> &tc_phi();
  const vector<int> &tc_type();
  const vector<int> &tc_pt5Idx();
  const vector<int> &tc_pt3Idx();
  const vector<int> &tc_t5Idx();
  const vector<int> &tc_plsIdx();
  const vector<int> &tc_isFake();
  const vector<int> &tc_isDuplicate();
  const vector<int> &tc_simIdx();
  const vector<vector<int> > &tc_simIdxAll();
  const vector<vector<float> > &tc_simIdxAllFrac();
  const vector<float> &md_pt();
  const vector<float> &md_eta();
  const vector<float> &md_phi();
  const vector<float> &md_anchor_x();
  const vector<float> &md_anchor_y();
  const vector<float> &md_anchor_z();
  const vector<float> &md_other_x();
  const vector<float> &md_other_y();
  const vector<float> &md_other_z();
  const vector<int> &md_type();
  const vector<int> &md_layer();
  const vector<int> &md_detId();
  const vector<int> &md_isFake();
  const vector<int> &md_simIdx();
  const vector<vector<int> > &md_simIdxAll();
  const vector<vector<float> > &md_simIdxAllFrac();
  const vector<float> &ls_pt();
  const vector<float> &ls_eta();
  const vector<float> &ls_phi();
  const vector<int> &ls_mdIdx0();
  const vector<int> &ls_mdIdx1();
  const vector<int> &ls_isFake();
  const vector<int> &ls_simIdx();
  const vector<vector<int> > &ls_simIdxAll();
  const vector<vector<float> > &ls_simIdxAllFrac();
  const vector<float> &t3_pt();
  const vector<float> &t3_eta();
  const vector<float> &t3_phi();
  const vector<int> &t3_lsIdx0();
  const vector<int> &t3_lsIdx1();
  const vector<int> &t3_isFake();
  const vector<int> &t3_isDuplicate();
  const vector<int> &t3_simIdx();
  const vector<vector<int> > &t3_simIdxAll();
  const vector<vector<float> > &t3_simIdxAllFrac();
  const vector<float> &t5_pt();
  const vector<float> &t5_eta();
  const vector<float> &t5_phi();
  const vector<int> &t5_t3Idx0();
  const vector<int> &t5_t3Idx1();
  const vector<int> &t5_isFake();
  const vector<int> &t5_isDuplicate();
  const vector<int> &t5_simIdx();
  const vector<vector<int> > &t5_simIdxAll();
  const vector<vector<float> > &t5_simIdxAllFrac();
  const vector<float> &pls_pt();
  const vector<float> &pls_eta();
  const vector<float> &pls_phi();
  const vector<int> &pls_nhit();
  const vector<float> &pls_hit0_x();
  const vector<float> &pls_hit0_y();
  const vector<float> &pls_hit0_z();
  const vector<float> &pls_hit1_x();
  const vector<float> &pls_hit1_y();
  const vector<float> &pls_hit1_z();
  const vector<float> &pls_hit2_x();
  const vector<float> &pls_hit2_y();
  const vector<float> &pls_hit2_z();
  const vector<float> &pls_hit3_x();
  const vector<float> &pls_hit3_y();
  const vector<float> &pls_hit3_z();
  const vector<int> &pls_isFake();
  const vector<int> &pls_isDuplicate();
  const vector<int> &pls_simIdx();
  const vector<vector<int> > &pls_simIdxAll();
  const vector<vector<float> > &pls_simIdxAllFrac();
  const vector<float> &pt3_pt();
  const vector<float> &pt3_eta();
  const vector<float> &pt3_phi();
  const vector<int> &pt3_plsIdx();
  const vector<int> &pt3_t3Idx();
  const vector<int> &pt3_isFake();
  const vector<int> &pt3_isDuplicate();
  const vector<int> &pt3_simIdx();
  const vector<vector<int> > &pt3_simIdxAll();
  const vector<vector<float> > &pt3_simIdxAllFrac();
  const vector<float> &pt5_pt();
  const vector<float> &pt5_eta();
  const vector<float> &pt5_phi();
  const vector<int> &pt5_plsIdx();
  const vector<int> &pt5_t5Idx();
  const vector<int> &pt5_isFake();
  const vector<int> &pt5_isDuplicate();
  const vector<int> &pt5_simIdx();
  const vector<vector<int> > &pt5_simIdxAll();
  const vector<vector<float> > &pt5_simIdxAllFrac();
  static void progress( int nEventsTotal, int nEventsChain );
};

#ifndef __CINT__
extern SDL sdl;
#endif

namespace tas {

  const vector<float> &sim_pt();
  const vector<float> &sim_eta();
  const vector<float> &sim_phi();
  const vector<float> &sim_pca_dxy();
  const vector<float> &sim_pca_dz();
  const vector<int> &sim_q();
  const vector<int> &sim_pdgId();
  const vector<float> &sim_vx();
  const vector<float> &sim_vy();
  const vector<float> &sim_vz();
  const vector<float> &sim_vtxperp();
  const vector<float> &sim_trkNtupIdx();
  const vector<int> &sim_tcIdx();
  const vector<vector<int> > &sim_tcIdxAll();
  const vector<vector<float> > &sim_tcIdxAllFrac();
  const vector<vector<int> > &sim_mdIdxAll();
  const vector<vector<float> > &sim_mdIdxAllFrac();
  const vector<vector<int> > &sim_lsIdxAll();
  const vector<vector<float> > &sim_lsIdxAllFrac();
  const vector<vector<int> > &sim_t3IdxAll();
  const vector<vector<float> > &sim_t3IdxAllFrac();
  const vector<vector<int> > &sim_t5IdxAll();
  const vector<vector<float> > &sim_t5IdxAllFrac();
  const vector<vector<int> > &sim_plsIdxAll();
  const vector<vector<float> > &sim_plsIdxAllFrac();
  const vector<vector<int> > &sim_pt3IdxAll();
  const vector<vector<float> > &sim_pt3IdxAllFrac();
  const vector<vector<int> > &sim_pt5IdxAll();
  const vector<vector<float> > &sim_pt5IdxAllFrac();
  const vector<vector<float> > &sim_simHitX();
  const vector<vector<float> > &sim_simHitY();
  const vector<vector<float> > &sim_simHitZ();
  const vector<vector<int> > &sim_simHitDetId();
  const vector<vector<int> > &sim_simHitLayer();
  const vector<vector<float> > &sim_simHitDistxyHelix();
  const vector<vector<float> > &sim_simHitLayerMinDistxyHelix();
  const vector<vector<float> > &sim_recoHitX();
  const vector<vector<float> > &sim_recoHitY();
  const vector<vector<float> > &sim_recoHitZ();
  const vector<vector<int> > &sim_recoHitDetId();
  const vector<float> &tc_pt();
  const vector<float> &tc_eta();
  const vector<float> &tc_phi();
  const vector<int> &tc_type();
  const vector<int> &tc_pt5Idx();
  const vector<int> &tc_pt3Idx();
  const vector<int> &tc_t5Idx();
  const vector<int> &tc_plsIdx();
  const vector<int> &tc_isFake();
  const vector<int> &tc_isDuplicate();
  const vector<int> &tc_simIdx();
  const vector<vector<int> > &tc_simIdxAll();
  const vector<vector<float> > &tc_simIdxAllFrac();
  const vector<float> &md_pt();
  const vector<float> &md_eta();
  const vector<float> &md_phi();
  const vector<float> &md_anchor_x();
  const vector<float> &md_anchor_y();
  const vector<float> &md_anchor_z();
  const vector<float> &md_other_x();
  const vector<float> &md_other_y();
  const vector<float> &md_other_z();
  const vector<int> &md_type();
  const vector<int> &md_layer();
  const vector<int> &md_detId();
  const vector<int> &md_isFake();
  const vector<int> &md_simIdx();
  const vector<vector<int> > &md_simIdxAll();
  const vector<vector<float> > &md_simIdxAllFrac();
  const vector<float> &ls_pt();
  const vector<float> &ls_eta();
  const vector<float> &ls_phi();
  const vector<int> &ls_mdIdx0();
  const vector<int> &ls_mdIdx1();
  const vector<int> &ls_isFake();
  const vector<int> &ls_simIdx();
  const vector<vector<int> > &ls_simIdxAll();
  const vector<vector<float> > &ls_simIdxAllFrac();
  const vector<float> &t3_pt();
  const vector<float> &t3_eta();
  const vector<float> &t3_phi();
  const vector<int> &t3_lsIdx0();
  const vector<int> &t3_lsIdx1();
  const vector<int> &t3_isFake();
  const vector<int> &t3_isDuplicate();
  const vector<int> &t3_simIdx();
  const vector<vector<int> > &t3_simIdxAll();
  const vector<vector<float> > &t3_simIdxAllFrac();
  const vector<float> &t5_pt();
  const vector<float> &t5_eta();
  const vector<float> &t5_phi();
  const vector<int> &t5_t3Idx0();
  const vector<int> &t5_t3Idx1();
  const vector<int> &t5_isFake();
  const vector<int> &t5_isDuplicate();
  const vector<int> &t5_simIdx();
  const vector<vector<int> > &t5_simIdxAll();
  const vector<vector<float> > &t5_simIdxAllFrac();
  const vector<float> &pls_pt();
  const vector<float> &pls_eta();
  const vector<float> &pls_phi();
  const vector<int> &pls_nhit();
  const vector<float> &pls_hit0_x();
  const vector<float> &pls_hit0_y();
  const vector<float> &pls_hit0_z();
  const vector<float> &pls_hit1_x();
  const vector<float> &pls_hit1_y();
  const vector<float> &pls_hit1_z();
  const vector<float> &pls_hit2_x();
  const vector<float> &pls_hit2_y();
  const vector<float> &pls_hit2_z();
  const vector<float> &pls_hit3_x();
  const vector<float> &pls_hit3_y();
  const vector<float> &pls_hit3_z();
  const vector<int> &pls_isFake();
  const vector<int> &pls_isDuplicate();
  const vector<int> &pls_simIdx();
  const vector<vector<int> > &pls_simIdxAll();
  const vector<vector<float> > &pls_simIdxAllFrac();
  const vector<float> &pt3_pt();
  const vector<float> &pt3_eta();
  const vector<float> &pt3_phi();
  const vector<int> &pt3_plsIdx();
  const vector<int> &pt3_t3Idx();
  const vector<int> &pt3_isFake();
  const vector<int> &pt3_isDuplicate();
  const vector<int> &pt3_simIdx();
  const vector<vector<int> > &pt3_simIdxAll();
  const vector<vector<float> > &pt3_simIdxAllFrac();
  const vector<float> &pt5_pt();
  const vector<float> &pt5_eta();
  const vector<float> &pt5_phi();
  const vector<int> &pt5_plsIdx();
  const vector<int> &pt5_t5Idx();
  const vector<int> &pt5_isFake();
  const vector<int> &pt5_isDuplicate();
  const vector<int> &pt5_simIdx();
  const vector<vector<int> > &pt5_simIdxAll();
  const vector<vector<float> > &pt5_simIdxAllFrac();
}
#endif
