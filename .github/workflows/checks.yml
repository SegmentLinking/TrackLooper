name: Checks

on:
  issue_comment:
    types: [created]
  pull_request:
    branches: master

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number }}-${{ github.event.comment.user.login }}-${{ contains(github.event.comment.body, '/run standalone') }}-${{ contains(github.event.comment.body, '/run cmssw') }}-${{ github.sha }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  standalone:
    if: >
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '/run standalone') &&
      github.event.comment.user.login == 'ariostas'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.issue.number }}/head
      - name: Get commit SHA
        run: |  
          sha=$(git rev-parse HEAD)
          echo "COMMIT_SHA=$sha" >> $GITHUB_ENV
      - uses: LouisBrunner/checks-action@v1.6.1
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ env.COMMIT_SHA }}
          name: standalone
          status: in_progress
          details_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      - name: Build and run PR
        id: build-and-run
        uses: SegmentLinkingTests/TrackLooper-actions/standalone@v1
        with:
          pr-number: ${{ github.event.issue.number }}
      - name: Upload plots to archival repo
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: git@github.com:${{ steps.build-and-run.outputs.archive-repo }}.git
          BRANCH: ${{ steps.build-and-run.outputs.archive-branch }}
          FOLDER: ${{ steps.build-and-run.outputs.archive-dir }}
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
          TARGET_DIR: ${{ steps.build-and-run.outputs.archive-dir }}
      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${{ steps.build-and-run.outputs.comment }}`
            })
      - name: Comment on PR if job failed.
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `There was a problem while building and running in standalone mode. You can find a log of the job [here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).`
            })
      - uses: LouisBrunner/checks-action@v1.6.1
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ env.COMMIT_SHA }}
          name: standalone
          conclusion: ${{ job.status }}
          details_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
       
  cmssw:
    if: >
      github.event.issue.pull_request && 
      contains(github.event.comment.body, '/run cmssw') &&
      github.event.comment.user.login == 'ariostas'
    runs-on: ubuntu-latest
    timeout-minutes: 150
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.issue.number }}/head
      - name: Get commit SHA
        run: |  
          sha=$(git rev-parse HEAD)
          echo "COMMIT_SHA=$sha" >> $GITHUB_ENV
      - uses: LouisBrunner/checks-action@v1.6.1
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ env.COMMIT_SHA }}
          name: cmssw
          status: in_progress
          details_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      - name: Get CMSSW branch name
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        shell: bash
        run: |
          cmssw_branch=
          while IFS= read -r line; do
            echo "$line"
            if [[ $line == "/run cmssw"* ]]; then
              # Check if there is a branch after "/run cmssw"
              words=($line)
              cmssw_branch="${words[2]}"
              # Validate the extracted branch to avoid code injection
              if [ -n "$cmssw_branch" ]; then
                cmssw_branch=$(git check-ref-format --branch $cmssw_branch || echo "default")
              fi
            fi
          done <<< "$COMMENT_BODY"
          if [ -z "$cmssw_branch" ]; then
            cmssw_branch=default
          fi
          echo "Using CMSSW branch: $cmssw_branch"
          echo "cmssw-branch=$cmssw_branch" >> $GITHUB_ENV
      - name: Build and run PR
        id: build-and-run
        uses: SegmentLinkingTests/TrackLooper-actions/cmssw@v1
        with:
          pr-number: ${{ github.event.issue.number }}
          cmssw-branch: ${{ env.cmssw-branch }}
      - name: Upload plots to archival repo
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: git@github.com:${{ steps.build-and-run.outputs.archive-repo }}.git
          BRANCH: ${{ steps.build-and-run.outputs.archive-branch }}
          FOLDER: ${{ steps.build-and-run.outputs.archive-dir }}
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
          TARGET_DIR: ${{ steps.build-and-run.outputs.archive-dir }}
      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${{ steps.build-and-run.outputs.comment }}`
            })
      - name: Comment on PR if job failed.
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `There was a problem while building and running with CMSSW. You can find a log of the job [here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).`
            })
      - uses: LouisBrunner/checks-action@v1.6.1
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ env.COMMIT_SHA }}
          name: cmssw
          conclusion: ${{ job.status }}
          details_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  linter:
    if: ${{ github.event_name }} == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
      - name: Mount cvmfs
        uses: cvmfs-contrib/github-action-cvmfs@v3
      - name: Gather paths of needed headers
        shell: bash
        run: |
          source setup.sh
          INCLUDE_FLAGS="-I$TRACKLOOPERDIR -I$BOOST_ROOT/include -I$ALPAKA_ROOT/include -I$CUDA_HOME/include -I$ROOT_ROOT/include -I$CMSSW_BASE/src"
          INCLUDE_FLAGS="$INCLUDE_FLAGS -I/cvmfs/cms.cern.ch/el8_amd64_gcc11/external/gcc/11.4.1-30ebdc301ebd200f2ae0e3d880258e65/include/c++/11.4.1"
          INCLUDE_FLAGS="$INCLUDE_FLAGS -I/cvmfs/cms.cern.ch/el8_amd64_gcc11/external/gcc/11.4.1-30ebdc301ebd200f2ae0e3d880258e65/include/c++/11.4.1/x86_64-redhat-linux-gnu/"
          INCLUDE_FLAGS="$INCLUDE_FLAGS -I/cvmfs/cms.cern.ch/el8_amd64_gcc11/external/gcc/11.4.1-30ebdc301ebd200f2ae0e3d880258e65/lib/gcc/x86_64-redhat-linux-gnu/11.4.1/include"
          echo "include-flags=$INCLUDE_FLAGS" >> $GITHUB_ENV
          # Note: Ideally we would use compiledb to generate a compile_commands.json file, but I couldn't get it to work properly with clang-tidy.
          # This alternative of simply passing some extra arguments to clang-tidy seems to work fine (at least for now).
      - name: Run linter
        uses: cpp-linter/cpp-linter-action@v2
        id: linter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: file
          thread-comments: true
          # only use checks in .clang-tidy file
          tidy-checks: ''
          lines-changed-only: true
          ignore: .github|bin|code|data|efficiency
          extra-args: '-ferror-limit=0 -std=c++17 -DALPAKA_ACC_CPU_B_SEQ_T_SEQ_ENABLED ${{ env.include-flags }}'
      - name: Fail job if there were checks that failed
        if: steps.linter.outputs.checks-failed > 0
        run: exit 1
